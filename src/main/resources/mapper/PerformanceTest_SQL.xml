<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.forten.mapper.PerformanceTestMapper">
    
    <select id="selectListAllPerformanceTest" parameterType="com.forten.vo.PerformanceTestVO" resultType="com.forten.vo.PerformanceTestVO">
        select 
               s.name
             , s.student_code
             , case when s.gender = 'M' then '남' else '여' end as gender
             , pr.record_ym
             , (select code_name from common_code where code = s.region_code) as region_code
             , (select code_name from common_code where code = s.school_code) as school_code
             , max(case when ec.event_code = 'jump' then pr.score end) as pf_jump
             , max(case when ec.event_code = 'situp' then pr.score end) as pf_situp
             , max(case when ec.event_code = 'zrun' then pr.score end) as pf_zrun
             , max(case when ec.event_code = 'medicine' then pr.score end) as pf_medicine
             , max(case when ec.event_code = 'sprint100' then pr.score end) as pf_sprint100
             , max(case when ec.event_code = 'flex' then pr.score end) as pf_flex
             , max(case when ec.event_code = 'throw' then pr.score end) as pf_throw
             , max(case when ec.event_code = 'back' then pr.score end) as pf_back
             , max(case when ec.event_code = 'shuttle10' then pr.score end) as pf_shuttle10
             , max(case when ec.event_code = 'shuttle20' then pr.score end) as pf_shuttle20
          from performance_record pr
          join student s on pr.student_code = s.student_code
          join event_code ec on pr.event_code = ec.event_code
         where 1=1
         <if test="recordYm != null and recordYm != ''">
           and pr.record_ym = #{recordYm}
         </if>
         <if test="gender != null and gender != ''">
           and s.gender = #{gender}
         </if>
         <if test="regionCode != null and regionCode != ''">
           and s.region_code = #{regionCode}
         </if>
         <if test="name != null and name != ''">
           and s.name = #{name}
         </if>
      GROUP BY s.name
             , s.student_code
             , s.gender
             , pr.record_ym
             , s.region_code
             , s.school_code
      ORDER BY pr.record_ym
             , s.name
    </select>
    <insert id="insertStudent" parameterType="com.forten.vo.PerformanceTestVO">
        insert into
               student
             (
                  student_code
                , name
                , gender
                , school_code_group
                , school_code
                , region_code_group
                , region_code
                , created_at
                , created_by
                , updated_at
                , updated_by
                , image_src
             ) 
        values (
           nextval('student_code_seq')::TEXT
          , #{name}
          , #{gender}
          , 'SCHOOL'
          , (SELECT code FROM common_code where code_group = 'SCHOOL' and code_name = #{schoolCode})
          , 'DISTRICT'
          , (SELECT code FROM common_code where code_group = 'DISTRICT' and code_name = #{regionCode})
          , now()
          , 'jjs'
          , now()
          , 'jjs'
          , #{imageSrc}
        )
    </insert>
    <select id="selectListAllStudent" parameterType="com.forten.vo.PerformanceTestVO" resultType="com.forten.vo.PerformanceTestVO">
        select
               name
             , student_code
             , image_src
             , case when gender = 'M' then '남' else '여' end as gender
             , (select code_name from common_code where code = region_code) as region_code
             , (select code_name from common_code where code = school_code) as school_code
          from student
    </select>
    <select id="selectPerformaceRecord" parameterType="com.forten.vo.PerformanceTestVO" resultType="com.forten.vo.PerformanceTestVO">
        select
               event_code
             , student_code
             , record_ym
          from performance_record
        where event_code = #{eventCode}
          and student_code = #{studentCode}
          and record_ym = #{recordYm}
        limit 1
    </select>
    <update id="updatePerformanceRecord" parameterType="com.forten.vo.PerformanceTestVO">
        update performance_record
        set 
            score = #{score}
          , updated_at = now()
          , updated_by = 'jjs'
        where record_ym = #{recordYm}
          and student_code = #{studentCode}
          and event_code = #{eventCode}
    </update>
    <insert id="insertPerformanceRecord" parameterType="com.forten.vo.PerformanceTestVO">
        insert into
               performance_record
             (
                  record_ym
                , student_code
                , event_code
                , score
                , created_at
                , created_by
                , updated_at
                , updated_by
             )
        values (
            #{recordYm}
          , #{studentCode}
          , #{eventCode}
          , #{score}
          , now()
          , 'jjs'
          , now()
          , 'jjs'
        )
    </insert>
</mapper>